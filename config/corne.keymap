/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include "keymap_italian.h"

// Layer definitions
#define BASE 0  //base_layer
#define MED 1   //med_layer
#define NAV 2   //nav_layer
#define SYM 3   //sym_layer 
#define NUM 4   //num_layer
#define FUN 5   //fun_layer

// tutti i led trattati come unica stringa led
&led_strip {
    chain-length = <27>;
};

/ {
        //Definitions of homerow mods
        behaviors {
                hm: homerow_tap_preferred_mods {
                compatible = "zmk,behavior-hold-tap";
                #binding-cells = <2>;
                tapping-term-ms = <200>;
                quick-tap-ms = <0>;
                flavor = "tap-preferred";
                bindings = <&kp>, <&kp>;
                };
        };
        
        keymap {
                compatible = "zmk,keymap";

                base_layer {
// -----------------------------------------------------------------------------------------
// | xxx |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | xxx |
// | xxx |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  | xxx |
// | xxx |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  -  | xxx |
//                   | ESC | SPC | TAB |   | ENT | BSPC | DEL |
                        bindings = <
   &none &kp Q      &kp W      &kp E       &kp R       &kp T       &kp Y &kp U       &kp I       &kp O      &kp P         &none
   &none &hm LGUI A &hm LALT S &hm LCTRL D &hm LSHFT F &kp G       &kp H &hm RSHFT J &hm RCTRL K &hm RALT L &hm LGUI SEMI &none
   &none &kp Z      &kp X      &kp C       &kp V       &kp B       &kp N &kp M       &kp COMMA   &kp DOT    &kp IT_MINUS  &none
                               &mt MED ESC &mt NAV SPC &mt SYM TAB   &kp RET         &kp BSPC  &kp DEL
                        >;
                };
                med_layer {
// -----------------------------------------------------------------------------------------
// | xxx |     |     |     |     |     |    | BT1    | BT2    | BT3      | BT4      | BT5  | xxx |
// | xxx |     |     |     |     |     |    |        | K_PREV | K_VOL_DN | K_VOL_UP | C_FF | xxx |
// | xxx |     |     |     |     |     |    |        |        |          |          |      | xxx |
//                   | ESC | MED | SPC |    | K_STOP | K_PP   | K_MUTE   |
                        bindings = <
   &none &trans &trans &trans  &trans  &trans    &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &none
   &none &trans &trans &trans  &trans  &trans    &trans       &kp K_PREV   &kp K_VOL_DN &kp K_VOL_UP &kp C_FF     &none
   &none &trans &trans &trans  &trans  &trans    &trans       &trans       &trans       &trans       &trans       &none
                       &kp ESC &kp SPC &kp TAB   &kp K_STOP   &kp K_PP     &kp K_MUTE
                        >;
                };

                nav_layer {
// -----------------------------------------------------------------------------------------
// | xxx |     |     |     |     |     |   | Copy   | Paste |  UP   | Redo  | Undo | xxx |
// | xxx |     |     |     |     |     |   |        | LEFT  | DOWN  | RIGHT |      | xxx |
// | xxx |     |     |     |     |     |   | Insert | Home  | Pg Dn | Pg Up | End  | xxx |
//                   | ESC | SPC | TAB |   | ENT    | BSPC  | DEL   |
                        bindings = <
   &none &trans &trans &trans   &trans &trans     &kp LC(C)  &kp LC(V) &kp UP     &kp LC(Y) &kp LC(Z) &none
   &none &trans &trans &trans   &trans &trans     &kp CAPS   &kp LEFT  &kp DOWN   &kp RIGHT &kp BSLH  &none
   &none &trans &trans &trans   &trans &trans     &kp INSERT &kp HOME  &kp PG_DN  &kp PG_UP &kp END   &none
                       &kp LGUI &trans &kp SPACE  &kp RET    &kp BSPC  &kp DEL
                        >;
                };

                sym_layer {
// -----------------------------------------------------------------------------------------
// | xxx |     |     |     |     |     |    |  &  |  /  |  (  |  )  |  =  | xxx |
// | xxx |     |     |     |     |     |    |  |  |  ?  |  [  |  ]  |  \  | xxx |
// | xxx |     |     |     |     |     |    |  ^  |  '  |  {  |  }  |  °  | xxx |
//                   | ESC | SPC | TAB |    | ENT | BSPC | DEL  |
                        bindings = <
   &none &trans &trans &trans   &trans &trans     &kp LC(C)  &kp LC(V) &kp UP     &kp LC(Y) &kp LC(Z) &none
   &none &trans &trans &trans   &trans &trans     &kp CAPS   &kp LEFT  &kp DOWN   &kp RIGHT &kp BSLH  &none
   &none &trans &trans &trans   &trans &trans     &kp INSERT &kp HOME  &kp PG_DN  &kp PG_UP &kp END   &none
                       &kp LGUI &trans &kp SPACE  &kp RET    &kp BSPC  &kp DEL
                        >;
                };

|  &  |  /  |  (  |  )  |  =  | xxx |
|  |  |  ?  |  [  |  ]  |  \  | xxx |
|  ^  |  '  |  {  |  }  |  °  | xxx |
| ENT | BSPC | DEL  |

|  &  |  (  |  )  |  =  |  ?  | xxx |
|  |  |  [  |  ]  |  \  |  /  | xxx |
|  ^  |  {  |  }  |  °  |  ~  | xxx |
| ENT | BSPC | DEL  |


| xxx |  !  |  "  |  £  |  $  |  %  |
| xxx |  ì  |  é  |  è  |  ù  |  à  |
| xxx |  <  |  >  |     |     |  ò  |
                  | ESC | SPC | TAB |


        };
};




//               nav_layer {
// -----------------------------------------------------------------------------------------
// | xxx |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | xxx |
// | xxx |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  | xxx |
// | xxx |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" | xxx |
//                    | GUI |     | SPC |   | ENT |     | ALT |
//                        bindings = <
//   &none &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR &kp RPAR &none
//   &none &trans   &trans &trans   &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT        &kp RBKT &kp BSLH &none
//   &none &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC        &kp RBRC &kp PIPE &none
//                             &kp LGUI &trans   &kp SPACE   &kp RET   &trans    &kp RALT
//                        >;
//                };
//        };
//};